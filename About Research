In the modern world, there are several applied fields where one of the key challenges is organizing the operation of complex technological systems to optimize time and resource usage. Such systems typically involve a finite set of tasks constrained by specific technological restrictions on their execution order.

Problems of this type were formulated in the first half of the 20th century when technological progress led to the emergence of large enterprises. These enterprises faced challenges related to ordering tasks with available resources. Such task ordering was closely tied to technological processes, such as assembling automobiles and other complex structures. Over time, commercial organizations began merging into conglomerates, which facilitated the rise of assembly line production and necessitated the establishment of complex technological chains for product manufacturing. Consequently, the need for parallelization of production processes emerged in many other areas, including the food industry, manufacturing of electronic and mechanical devices, construction, and more.

With the advent of digital computing technology, these problems gained relevance in fields related to data processing and transmission. In such cases, the executors are not humans or mechanical machines but computer processors, which introduce new challenges and constraints on the initial data when designing algorithms for solving these problems. Utilizing multi-threaded computer processors enables the implementation of software features such as print queue management, image and animation editing, graphics rendering, parallel simulations, and file transfers within systems. It also facilitates the division and parallelization of computations during scientific research, which is crucial when processing large data volumes.

The application of mathematical methods reduces such problems to the construction of parallel task ordering, with the technological constraints on task execution often modeled using directed acyclic graphs. These graphs visually represent the connections between parts of complex processes. Such problems were first described by Hu T. in the work "Sequencing and Assembly Line Problems," highlighting their practical significance.

The development of the theoretical foundation for these problems involved the creation of exact and approximate algorithms for finding solutions. Additionally, one of the research directions for these problems was proposed by R. L. Graham in 1969. He described an algorithm for solving the problem that assumes a predefined list of priorities. However, this method of solution reveals an interesting phenomenon, which he termed "time anomalies." These anomalies occur in cases where changes in the initial data, which should improve or leave the results unchanged, actually lead to their deterioration.

After discovering the anomaly phenomenon, researchers faced the challenges of determining how their occurrence affects results in applied problems with real data and identifying the conditions of initial data under which anomalies arise or do not occur. T. Ludkvist and P. Steinstr√∂m proposed such conditions for one type of anomaly occurring when processors handle programs that utilize data caching. Meanwhile, J. Kolota, J. Smikowski, and S. Stefan provided examples of anomalies arising in electromagnetic system calculations.

The goal of this qualification work is to study a known class of applied optimization problems involving the allocation of partially ordered tasks where execution time is not constant, reducing these problems to a generalized task of constructing parallel orderings. It includes analyzing anomalies through examples, investigating conditions for the absence and occurrence of anomalous cases, and developing a method for specific graph cases to modify the initial task parameters to prevent anomalies. Additionally, the work examines how changes in other initial data influence anomaly occurrence, provides a software implementation of algorithms illustrating anomalies based on user-defined input data, and analyzes the program's results.
